// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/iam_policy.proto
// Original file comments:
// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Iam.V1 {
  /// <summary>
  ///  ## API Overview
  ///
  ///  Any implementation of an API that offers access control features
  ///  implements the google.iam.v1.IAMPolicy interface.
  ///
  ///  ## Data model
  ///
  ///  Access control is applied when a principal (user or service account), takes
  ///  some action on a resource exposed by a service. Resources, identified by
  ///  URI-like names, are the unit of access control specification. Service
  ///  implementations can choose the granularity of access control and the
  ///  supported permissions for their resources.
  ///  For example one database service may allow access control to be
  ///  specified only at the Table level, whereas another might allow access control
  ///  to also be specified at the Column level.
  ///
  ///  ## Policy Structure
  ///
  ///  See google.iam.v1.Policy
  ///
  ///  This is intentionally not a CRUD style API because access control policies
  ///  are created and deleted implicitly with the resources to which they are
  ///  attached.
  /// </summary>
  public static class IAMPolicy
  {
    static readonly string __ServiceName = "google.iam.v1.IAMPolicy";

    static readonly Marshaller<global::Google.Iam.V1.SetIamPolicyRequest> __Marshaller_SetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.V1.SetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.V1.Policy> __Marshaller_Policy = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.V1.Policy.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.V1.GetIamPolicyRequest> __Marshaller_GetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.V1.GetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.V1.TestIamPermissionsRequest> __Marshaller_TestIamPermissionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.V1.TestIamPermissionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.V1.TestIamPermissionsResponse> __Marshaller_TestIamPermissionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.V1.TestIamPermissionsResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Iam.V1.SetIamPolicyRequest, global::Google.Iam.V1.Policy> __Method_SetIamPolicy = new Method<global::Google.Iam.V1.SetIamPolicyRequest, global::Google.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_SetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Iam.V1.GetIamPolicyRequest, global::Google.Iam.V1.Policy> __Method_GetIamPolicy = new Method<global::Google.Iam.V1.GetIamPolicyRequest, global::Google.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_GetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Iam.V1.TestIamPermissionsRequest, global::Google.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new Method<global::Google.Iam.V1.TestIamPermissionsRequest, global::Google.Iam.V1.TestIamPermissionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_TestIamPermissionsRequest,
        __Marshaller_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Iam.V1.IamPolicyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IAMPolicy</summary>
    public abstract class IAMPolicyBase
    {
      /// <summary>
      ///  Sets the access control policy on the specified resource. Replaces any
      ///  existing policy.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.V1.Policy> SetIamPolicy(global::Google.Iam.V1.SetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the access control policy for a resource. Is empty if the
      ///  policy or the resource does not exist.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.V1.Policy> GetIamPolicy(global::Google.Iam.V1.GetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns permissions that a caller has on the specified resource.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Iam.V1.TestIamPermissionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IAMPolicy</summary>
    public class IAMPolicyClient : ClientBase<IAMPolicyClient>
    {
      /// <summary>Creates a new client for IAMPolicy</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IAMPolicyClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IAMPolicy that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IAMPolicyClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IAMPolicyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IAMPolicyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Sets the access control policy on the specified resource. Replaces any
      ///  existing policy.
      /// </summary>
      public virtual global::Google.Iam.V1.Policy SetIamPolicy(global::Google.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the access control policy on the specified resource. Replaces any
      ///  existing policy.
      /// </summary>
      public virtual global::Google.Iam.V1.Policy SetIamPolicy(global::Google.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Sets the access control policy on the specified resource. Replaces any
      ///  existing policy.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the access control policy on the specified resource. Replaces any
      ///  existing policy.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Gets the access control policy for a resource. Is empty if the
      ///  policy or the resource does not exist.
      /// </summary>
      public virtual global::Google.Iam.V1.Policy GetIamPolicy(global::Google.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the access control policy for a resource. Is empty if the
      ///  policy or the resource does not exist.
      /// </summary>
      public virtual global::Google.Iam.V1.Policy GetIamPolicy(global::Google.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Gets the access control policy for a resource. Is empty if the
      ///  policy or the resource does not exist.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the access control policy for a resource. Is empty if the
      ///  policy or the resource does not exist.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Returns permissions that a caller has on the specified resource.
      /// </summary>
      public virtual global::Google.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns permissions that a caller has on the specified resource.
      /// </summary>
      public virtual global::Google.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      ///  Returns permissions that a caller has on the specified resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns permissions that a caller has on the specified resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      protected override IAMPolicyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IAMPolicyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(IAMPolicyBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

  }
}
#endregion
